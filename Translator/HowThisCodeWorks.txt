					Example works code : (file DecimalToBinary)
					
      Take fractional number 44.12 (Bit system - 32)
      
  1)  Getting binary number representation (number need divide on 2. If number integer write 0, other case - 1)
  
      44 / 2|                 
      ------| 22 / 2|       
         0  |-------| 11 - 1 = 10 |    
                 0  |-------------| 5 - 1|
                           1      |------| 4 / 2| 
                                      1  |------| 2 / 2| 
                                             0  |------|  
                                                    0  | 1
                                                    
  result = 0011001 (6 bit)
  
  2) Getting free bits for fraction
  
      24 - 6 = 18 
(24 - amount bits for fraction in system [32 or 64], 6 - amount bit for a number integer)			      		 	[if bit system = 64, 24 need replace on 53]

  3) Doing iterations for getting fractional (if number < 0 , write 0 ,other case - 1)
  
              Operations       Result bit   
          1)0.12 * 2 = 0.24       0    
          2)0.24 * 2 = 0.48       0   
          3)0.48 * 2 = 0.96       0    
          4)0.96 * 2 = 1.92       1  (1.92 - 1 = 0.92 - next iteration with number fractional 0.92)    
          5)0.92 * 2 = 1.84       1
          6)0.84 * 2 = 1.68       1   
          7)0.68 * 2 = 1.36       1
          8)0.36 * 2 = 0.72       0   
          9)0.72 * 2 = 1.44       1   
          10)0.44 * 2 = 0.88      0
          11)0.88 * 2 = 1.76      1
          12)0.76 * 2 = 1.52      1
          13)0.52 * 2 = 1.04      1
          14)0.04 * 2 = 0.08      0
          15)0.08 * 2 = 0.16      0
          16)0.16 * 2 = 0.32      0
          17)0.32 * 2 = 0.64      0
          18)0.64 * 2 = 1.28      1
          
 result = 100001110101111000   
 
  4) Getting comma(decimal number)[exponent]
  
      127 + (6 - 1) = 132    
  [if bit system = 64, 127 need replace on 1023]
  
  5) Getting binary comma[exponent]
  
      result = 00100001 (look stage 1)
      
  6) Combine all results in one binary number
  
      10000111010111100000110001000010                1)Stage 3    2)Stage 1
      |----------------||---||------||---> 4          3)Stage 4   4)Sign (if number positive => 0, negative => 1)
              1           2      3

  Take fractional number 0.14 (Bit system - 32)
  
  1) 0
  
  2) 24 - (-2) = 26 (amount iterations)
  
     log2(0.14) = -2.83 = -2  
     
  3)       How computer sees number (32 bit system)        Bit    |            How human sees number          Bit
      1)0.14000000059604645 * 2 = 0.28000000011920929       0     |   1)0.14 * 2 = 0.28                        0
      2)0.28000000011920929 * 2 = 0.5600000023841858        0     |   2)0.28 * 2 = 0.56                        0  
      3)0.5600000023841858 * 2 = 1.12000000476837158        1     |   3)0.56 * 2 = 1.12                        1
      4)0.12000000476837158 * 2 = 0.24000000953674316       0     |   4)0.12 * 2 = 0.24                        0
      5)0.24000000953674316 * 2 = 0.4800001907348633        0     |   5)0.24 * 2 = 0.48                        0 
      6)0.4800001907348633 * 2 = 0.9600000381469727         0     |   6)0.48 * 2 = 0.96                        0
      7)0.9600000381469727 * 2 = 1.9200000762939453         1     |   7)0.96 * 2 = 1.92                        1
      8)0.9200000762939453 * 2 = 1.8400001525878906         1     |   8)0.92 * 2 = 1.84                        1
      9)0.8400001525878906 * 2 = 1.6800003051757812         1     |   9)0.84 * 2 = 1.68                        1
      10)0.6800003051757812 * 2 = 1.3600006103515625        1     |   10)0.68 * 2 = 1.36                       1
      11)0.3600006103515625  * 2 = 0.720001220703125        0     |   11)0.36 * 2 = 0.72                       0
      12)0.720001220703125  * 2 = 1.44000244140625          1     |   12)0.72 * 2 = 1.44                       1
      13)0.44000244140625  * 2 = 0.8800048828125            0     |   13)0.44 * 2 = 0.88                       0
      14)0.8800048828125 * 2 = 1.760009765625               1     |   14)0.88 * 2 = 1.76                       1
      15)0.760009765625  * 2 = 1.52001953125                1     |   15)0.76 * 2 = 1.52                       1
      16)0.52001953125 * 2 = 1.0400390625                   1     |   16)0.52 * 2 = 1.04                       1	  
      17)0.0400390625 * 2 = 0.080078125                     0     |   17)0.04 * 2 = 0.08                       0
      18)0.080078125  * 2 = 0.16015625                      0     |   18)0.08 * 2 = 0.16                       0
      19)0.16015625 * 2 = 0.3203125                         0     |   19)0.16 * 2 = 0.32                       0
      20)0.3203125 * 2 = 0.640625                           0     |   20)0.32 * 2 = 0.64                       0 
      21)0.640625  * 2 = 1.28125                            1     |   21)0.64 * 2 = 1.28                       1 
      22)0.28125 * 2 = 0.5625                               0     |   22)0.28 * 2 = 0.56                       0
      23)0.5625  * 2 = 1.125                                1     |   23)0.56 * 2 = 1.12                       1
      24)0.125 * 2 = 0.25                                   0     |   24)0.12 * 2 = 0.24                       0
      25)0.25 * 2 = 0.5                                     0     |   25)0.24 * 2 = 0.48                       0
      26)0.5 * 2 = 1                                        1     |   26)0.48 * 2 = 0.96                       0
      
     computer = 10010100001110101111000100 
     human    = 00010100001110101111000100  
     
     (64 bit system don't have this problem) 
     
                          FOLLOWING OPERATIONS USED VARIATION "HOW SEES NUMBER COMPUTER"
                          
      10010100001110101111000100  (result have excess numbers)
      
      log2(0.14) = -2.83 = |-3| = 3 (getting amount excess numbers)
      
      10010100001110101111000
      
  4) 127 + (-3) = 124                                      
      log2(0.14) = -2.83 = -3
      
  5)  124 / 2|    
      -------| 62 / 2|
         0   |-------| 31 - 1 | 
                 0   |--------| 15 - 1| 
                         1    |-------|  7 - 1 | 
                                  1   |--------| 3 - 1 |    					 		                                  1    |-------|  
                                                   1   |  1
                                                   
      result = 0011111 (but result < 8 bits [1 byte]. Need add last 8 bit , where he = 0)
      result = 00111110            
      
  6)  1001010000110101111000001111100
      |____________________||______||-->3         1)Stage 3       2)Stage 5       3)Sign
                1              2  
 
 Take positive number integer 327
 
  1) Getting binary representation number
  
      327 - 1 |
      --------| 163 - 1 | 
         1    |---------| 81 - 1 |
                  1     |--------| 40 / 2 |
                             1   |--------| 20 / 2| 
                                      0   |-------| 10 / 2 |
                                              0   |--------| 5 - 1 |
                                                      0    |-------| 2 / 2|   
                                                               1   |------|
                                                                       0  | 1 
     result = 101000111 
              |_______|
                  9 (amount numbers) 
                   
  2) Getting number of zeros to add
     32 - 9 = 23
     [if bit system = 64, 32 need replace on 64]
     
  3) Combine all results in one binary number
     00000000000000000000000101000111             1)Stage 1  2)Stage2							 
     |_____________________||_______| 
              1                 2  

  Take negative number integer -327
  
  1) -327 + 1 = |-326| = 326 (this step can be skipped, but last stage need add 1 bit to result)
  
  2) 326 / 2|
     -------| 163 - 1 | 
        0   |---------| 81 - 1 |   
                 1    |--------| 40 / 2 |
                           1   |--------| 20 / 2|
                                    0   |-------| 10 / 2| 
                                            0   |-------| 5 - 1|  
                                                    0   |------| 2 / 2|
                                                            1  |------|
                                                                   0  | 1         
      result = 101000110
               |_______|
                   9(amount numbers)

  3) Getting number of zeros to add
      32 - 9 = 23
      
  4) 00000000000000000000000101000110
  
  5) Inversion result stage 4
  
     11111111111111111111111010111001




					Example works code : (file BinaryToDecimal)
  Take fractional number 44.12 (Bit system - 32)
  
  44.12 - 10000111010111100000110001000010
          |________________||___||______||---> sign
                   4           2     1 
                   
  1) Getting comma integer (exponent)
  
 (1) 0 0 1 0 0 0 0 1 = 4 + 128 = 132
     0 1 2 3 4 5 6 7 
     
   How get numbers line ? [1 2 4 8 16 32 64 128 ]
     0 * 2^0 + 0 * 2^1 + 1 * 2^2 + 0 * 2^3 + 0 * 2^4 + 0 * 2^5 + 0 * 2^6 + 1 * 2^7 = 4 + 128 = 132
     
  2) Getting the number of bits of an integer
  
      132 - 127 = 5
     [if bit system = 64, 127 need replace on 1023]
     
  3) Getting decimal integer
  
 (2)  00110  => add 1 bit = > 001001
 
    0 * 2^0 + 0 * 2^1 + 1 * 2^2 + 1 * 2^3 + 0 * 2^4 + 1 * 2^5 = 4 + 8 + 32 = 44 --> integer 
    
  4) Getting decimal fractional
  
 (4) 100001110101111000 => 000111101011100001  
 
      0 0 0 1 1 1 1 0 1 0  1  1  1  0  0  0  0  1
      1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
      
      2^-4 + 2^-5 + 2^-6 + 2^-7 + 2^-9 + 2^-11 + 2^-12 + 2^-13 + 2^-18 = 0.119998931884765625 --> fractional
      
  5) Combine all in one
  
    (sign)44.0.119998931884765625 --> Stage 4 
           |
         Stage 3 

  Take fractional number 0.24 (Bit system - 32)
  
  0.24 - 11110001010000111010111001111100
         |_____________________||______||--->Sign 
                     3               1      
                     
  1) 00111110 = 4 + 8 + 16 + 32 + 64 = 124 (1)
  
  2) 124 - 127 = -3
      [if bit system = 64, 127 need replace on 1023]
      
  3) Add 3 bit (nulls)
  
     000 => 3 char need replace on 1 => 001
     
     001 11101011100001010001111  (3)
     
          0 0 1 1 1 1 0 1 0 1  1  1  0  0  0  0  1  0  1  0  0  0  1  1  1  1
          1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
      2^-3 + 2^-4 + 2^-5 + 2^-6 + 2^-8 + 2^-10 + 2^-11 + 2^-12 + 2^-17 + 2^-19 + 2^-23 + 2^-24 + 2^-25 + 2^-26 =  0.23999999463558197

  Take positive integer number 123 (Bit system - 32)
  
  123 - 00000000000000000000000001111011
  
  1) 11011110000000000000000000000000
  
  2)  1 1 0 1 1 1 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
      0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  
    
     1 * 2^0 + 1 * 2^1 + 1 * 2^3 + 1 * 2^4 + 1 * 2^5 + 1 * 2^6 =  123

 Take negative integer number -127 (Bit system - 32)
 
 -127 - 11111111111111111111111110000001
 
  1) 10000001111111111111111111111111
  
  2) 1 0 0 0 0 0 0 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
     
     1 * 2^0 +  1 * 2^7 +  1 * 2^8 + 1 * 2^9 + 1 * 2^10 + 1 * 2^11 + 1 * 2^12 + 1 * 2^13 + 1 * 2^14 + 1 * 2^15 + 1 * 2^16 + 1 * 2^17 +
   + 1 * 2^18 + 1 * 2^19 + 1 * 2^20 + 1 * 2^21 + 1 * 2^22 + 1 * 2^23 + 1 * 2^24 + 1 * 2^25 + 1 * 2^26 + 1 * 2^27 + 1 * 2^28 + 1 * 2^29 +   
   + 1 * 2^30 + 1 * 2^31 = 4294967169
   
  3) 4294967169 - 4294967296 = -127
                      |---> 2^32            
  [if bit system = 64, 4294967296 need replace on 18446744073709551616(2^64)]     
